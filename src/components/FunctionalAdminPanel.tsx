
import React, { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Plus, Download, Settings, RefreshCw, Users, Database, Shield, BarChart3 } from 'lucide-react';
import { useProgress } from '@/context/ProgressContext';
import { useTheme } from '@/context/ThemeContext';
import { AdminStats } from './AdminStats';
import { CourseManagement } from './CourseManagement';
import { UserAnalytics } from './UserAnalytics';
import { PlatformSettings } from './PlatformSettings';

export const FunctionalAdminPanel = () => {
  const { courses, setCourses, resetAllProgress } = useProgress();
  const { currentTheme } = useTheme();
  const [isExporting, setIsExporting] = useState(false);
  const [isResetting, setIsResetting] = useState(false);
  const [lastAction, setLastAction] = useState<string>('');

  const users = []; // –†–µ–∞–ª—å–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –ø–æ–∫–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç

  const handleExportData = async () => {
    setIsExporting(true);
    setLastAction('–≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö...');
    
    try {
      const data = {
        courses: courses,
        users: users,
        exportDate: new Date().toISOString(),
        platform: 'LearnHub Pro',
        version: '2.0'
      };
      
      const blob = new Blob([JSON.stringify(data, null, 2)], { type: 'application/json' });
      const url = URL.createObjectURL(blob);
      const a = document.createElement('a');
      a.href = url;
      a.download = `learnhub-export-${new Date().toISOString().split('T')[0]}.json`;
      document.body.appendChild(a);
      a.click();
      document.body.removeChild(a);
      URL.revokeObjectURL(url);
      
      setLastAction('‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã');
    } catch (error) {
      setLastAction('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ –¥–∞–Ω–Ω—ã—Ö');
    } finally {
      setIsExporting(false);
      setTimeout(() => setLastAction(''), 3000);
    }
  };

  const handleResetStats = async () => {
    if (!confirm('‚ö†Ô∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–±—Ä–æ—Å–∏—Ç—å –í–°–Æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É? –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å!')) {
      return;
    }
    
    setIsResetting(true);
    setLastAction('–°–±—Ä–æ—Å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏...');
    
    try {
      resetAllProgress();
      localStorage.clear(); // –û—á–∏—â–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ localStorage
      setLastAction('‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–±—Ä–æ—à–µ–Ω–∞');
    } catch (error) {
      setLastAction('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏');
    } finally {
      setIsResetting(false);
      setTimeout(() => setLastAction(''), 3000);
    }
  };

  const handleDeleteCourse = (courseId: number) => {
    const course = courses.find(c => c.id === courseId);
    if (!course) return;
    
    if (confirm(`–£–¥–∞–ª–∏—Ç—å –∫—É—Ä—Å "${course.title}"? –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å.`)) {
      setCourses(prev => prev.filter(c => c.id !== courseId));
      setLastAction(`‚úÖ –ö—É—Ä—Å "${course.title}" —É–¥–∞–ª—ë–Ω`);
      setTimeout(() => setLastAction(''), 3000);
    }
  };

  const handleAddCourse = () => {
    const title = prompt('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∫—É—Ä—Å–∞:');
    if (!title) return;
    
    const newCourse = {
      id: Math.max(...courses.map(c => c.id)) + 1,
      title: title,
      description: '–ù–æ–≤—ã–π –∫—É—Ä—Å',
      progress: 0,
      author: '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä',
      level: '–ù–∞—á–∏–Ω–∞—é—â–∏–π',
      xp: 500,
      badge: 'üìö',
      image: '/placeholder.svg',
      lessons: 10,
      completedLessons: 0
    };
    
    setCourses(prev => [...prev, newCourse]);
    setLastAction(`‚úÖ –ö—É—Ä—Å "${title}" –¥–æ–±–∞–≤–ª–µ–Ω`);
    setTimeout(() => setLastAction(''), 3000);
  };

  const handleBackupData = () => {
    const backup = {
      courses,
      users,
      timestamp: new Date().toISOString(),
      type: 'backup'
    };
    
    localStorage.setItem('learnhub_backup', JSON.stringify(backup));
    setLastAction('‚úÖ –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Å–æ–∑–¥–∞–Ω–∞');
    setTimeout(() => setLastAction(''), 3000);
  };

  const stats = {
    totalCourses: courses.length,
    activeUsers: users.length,
    totalLessons: courses.reduce((sum, course) => sum + course.lessons, 0),
    completedLessons: courses.reduce((sum, course) => sum + course.completedLessons, 0)
  };

  return (
    <div className="space-y-8 animate-fade-in">
      {/* Header */}
      <div className="flex items-center justify-between">
        <div>
          <h2 className={`text-3xl font-light ${currentTheme.foreground} mb-2`}>
            –ü–∞–Ω–µ–ª—å <span className={`font-bold bg-gradient-to-r ${currentTheme.primary} bg-clip-text text-transparent`}>—É–ø—Ä–∞–≤–ª–µ–Ω–∏—è</span>
          </h2>
          <p className={currentTheme.muted}>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º–æ–π LearnHub Pro</p>
          {lastAction && (
            <p className="text-sm mt-2 px-3 py-1 bg-blue-500/20 border border-blue-400/30 rounded-full inline-block">
              {lastAction}
            </p>
          )}
        </div>
        
        <div className="flex flex-wrap gap-3">
          <Button 
            onClick={handleAddCourse} 
            className={`bg-gradient-to-r ${currentTheme.primary} text-white transition-all duration-200 ${currentTheme.buttonHover}`}
          >
            <Plus className="w-4 h-4 mr-2" />
            –î–æ–±–∞–≤–∏—Ç—å –∫—É—Ä—Å
          </Button>
          
          <Button 
            onClick={handleExportData} 
            variant="outline" 
            disabled={isExporting}
            className={`${currentTheme.cardBg} ${currentTheme.border} ${currentTheme.foreground} hover:bg-white/10 transition-all duration-200`}
          >
            <Download className={`w-4 h-4 mr-2 ${isExporting ? 'animate-spin' : ''}`} />
            {isExporting ? '–≠–∫—Å–ø–æ—Ä—Ç...' : '–≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö'}
          </Button>
          
          <Button 
            onClick={handleBackupData} 
            variant="outline"
            className={`${currentTheme.cardBg} ${currentTheme.border} ${currentTheme.foreground} hover:bg-white/10 transition-all duration-200`}
          >
            <Database className="w-4 h-4 mr-2" />
            –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è
          </Button>
          
          <Button 
            onClick={handleResetStats} 
            variant="outline" 
            disabled={isResetting}
            className="bg-red-500/10 border-red-400/20 text-red-300 hover:bg-red-500/20 transition-all duration-200"
          >
            <RefreshCw className={`w-4 h-4 mr-2 ${isResetting ? 'animate-spin' : ''}`} />
            {isResetting ? '–°–±—Ä–æ—Å...' : '–°–±—Ä–æ—Å–∏—Ç—å –≤—Å—ë'}
          </Button>
        </div>
      </div>

      {/* Quick Stats */}
      <div className="grid grid-cols-2 md:grid-cols-4 gap-4">
        <Card className={`${currentTheme.cardBg} ${currentTheme.border} backdrop-blur-lg`}>
          <CardContent className="p-4 text-center">
            <div className={`text-2xl font-bold ${currentTheme.foreground}`}>{stats.totalCourses}</div>
            <div className={`text-sm ${currentTheme.muted}`}>–ö—É—Ä—Å–æ–≤</div>
          </CardContent>
        </Card>
        
        <Card className={`${currentTheme.cardBg} ${currentTheme.border} backdrop-blur-lg`}>
          <CardContent className="p-4 text-center">
            <div className={`text-2xl font-bold ${currentTheme.foreground}`}>{stats.activeUsers}</div>
            <div className={`text-sm ${currentTheme.muted}`}>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</div>
          </CardContent>
        </Card>
        
        <Card className={`${currentTheme.cardBg} ${currentTheme.border} backdrop-blur-lg`}>
          <CardContent className="p-4 text-center">
            <div className={`text-2xl font-bold ${currentTheme.foreground}`}>{stats.totalLessons}</div>
            <div className={`text-sm ${currentTheme.muted}`}>–í—Å–µ–≥–æ —É—Ä–æ–∫–æ–≤</div>
          </CardContent>
        </Card>
        
        <Card className={`${currentTheme.cardBg} ${currentTheme.border} backdrop-blur-lg`}>
          <CardContent className="p-4 text-center">
            <div className={`text-2xl font-bold ${currentTheme.foreground}`}>{stats.completedLessons}</div>
            <div className={`text-sm ${currentTheme.muted}`}>–ó–∞–≤–µ—Ä—à–µ–Ω–æ</div>
          </CardContent>
        </Card>
      </div>

      <AdminStats />
      <CourseManagement courses={courses} onDeleteCourse={handleDeleteCourse} />
      <UserAnalytics users={users} />
      <PlatformSettings />
    </div>
  );
};
